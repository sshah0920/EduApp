{"version":3,"sources":["app/userReducer.js","components/widgets/AsyncSelector.js","components/Educations/EductionForm.js","components/Educations/index.js","helper/constants.js","components/Home/index.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["user","createSlice","name","initialState","educations","reducers","updateName","state","payload","updateEducation","actions","selectName","selectEducations","loadOptions","inputValue","callback","a","fetch","response","ok","json","map","label","value","alert","status","AsyncSelector","onChange","cacheOptions","defaultOptions","onInputChange","newValue","replace","Header","Modal","Title","Body","Footer","Row","Form","Group","Label","Control","EducationFormModal","props","useState","validated","setValidated","school","setSchool","degree","setDegree","fieldOfStudy","setFieldOfStudy","startYear","setStartYear","endYear","setEndYear","grade","setGrade","description","setDescription","dispatch","useDispatch","handleSubmit","event","preventDefault","currentTarget","checkValidity","stopPropagation","onHide","useEffect","show","size","aria-labelledby","centered","backdrop","keyboard","closeButton","id","noValidate","onSubmit","as","Col","md","controlId","required","type","placeholder","e","target","Feedback","rows","Button","variant","onClick","Item","ListGroup","Card","Subtitle","Text","Educations","showEduModal","setShowEduModal","userName","useSelector","location","useLocation","queryName","URLSearchParams","search","get","className","index","key","routes","home","Home","setName","history","useHistory","push","class","App","exact","path","configureStore","reducer","userReducer","Boolean","window","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fb1b060.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const user = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    name: '',\r\n    educations: []\r\n  },\r\n  reducers: {\r\n    updateName: (state, { payload }) => {\r\n      return state = {\r\n        ...state,\r\n        name: payload\r\n      }\r\n    },\r\n    updateEducation: ({ educations, ...state }, { payload }) => {\r\n      return state = {\r\n        ...state,\r\n        educations: [\r\n          payload,\r\n          ...educations, \r\n        ]\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nexport const { updateName, updateEducation } = user.actions;\r\n\r\nexport const selectName = state => state.user.name;\r\nexport const selectEducations = state => state.user.educations;\r\n\r\nexport default user.reducer;\r\n","import React from 'react';\nimport AsyncSelect from 'react-select/async';\n\n\nconst loadOptions = async (inputValue, callback) => {\n    if(inputValue){\n        let response = await fetch(\n            `http://universities.hipolabs.com/search?name=${inputValue}&country=United States`\n        );\n        if (response.ok) {\n            let json = await response.json();\n            json = await json.map(({ name }) => ({ label: name, value: name }));\n            callback(json);\n        } else {\n            alert(\"HTTP-Error: \" + response.status);\n            callback([]);\n        }\n    } else {\n        callback([]);\n    }\n};\n\n const AsyncSelector = ({ onChange, value }) => {\n    const handleInputChange = (newValue) => {\n        const inputValue = newValue.replace(/\\W/g, '');\n        return inputValue;\n    };\n    return (\n      <AsyncSelect\n        cacheOptions\n        loadOptions={loadOptions}\n        defaultOptions\n        onInputChange={handleInputChange}\n        onChange={({ value }) => onChange(value)}\n      />\n    );\n}\n\nexport default AsyncSelector;","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Form, Modal } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { updateEducation } from '../../app/userReducer';\nimport AsyncSelector from '../widgets/AsyncSelector';\n\nconst { Header, Title, Body, Footer } = Modal;\nconst { Row, Group, Label, Control } = Form;\n\nconst EducationFormModal = (props) => {\n    const [validated, setValidated] = useState(false);\n    const [school, setSchool] = useState(null);\n    const [degree, setDegree] = useState(\"\");\n    const [fieldOfStudy, setFieldOfStudy] = useState(\"\");\n    const [startYear, setStartYear] = useState(null);\n    const [endYear, setEndYear] = useState(null);\n    const [grade, setGrade] = useState(null);\n    const [description, setDescription] = useState('');\n\n    const dispatch = useDispatch();\n  \n    const handleSubmit = (event) => {\n      event.preventDefault();\n      const form = event.currentTarget;\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n      const educationData = {\n        school,\n        degree,\n        fieldOfStudy,\n        startYear,\n        endYear,\n        grade,\n        description,\n      };\n      dispatch(updateEducation(educationData));\n      setValidated(true);\n      props.onHide();\n    };\n\n    useEffect(() => {\n        if (!props.show) {\n            setValidated(false);\n          setSchool(null);\n          setDegree(\"\");\n          setFieldOfStudy(\"\");\n          setStartYear(null);\n          setEndYear(null);\n          setGrade(null);\n          setDescription(\"\");\n        }\n    }, [props.show])\n    \n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"education-form\"\n      centered\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Header closeButton>\n        <Title id=\"education-form\">Add Education</Title>\n      </Header>\n      <Body>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          <Row>\n            <Group as={Col} md=\"12\" controlId=\"school\">\n              <Label>Name of School</Label>\n              <AsyncSelector value={school} onChange={setSchool} />\n            </Group>\n            <Group as={Col} md=\"6\" controlId=\"school\">\n              <Label>Degree</Label>\n              <Control\n                required\n                type=\"text\"\n                placeholder=\"Enter you degree\"\n                value={degree}\n                onChange={(e) => setDegree(e.target.value)}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n            <Group as={Col} md=\"6\" controlId=\"school\">\n              <Label>Field of study</Label>\n              <Control\n                required\n                type=\"text\"\n                placeholder=\"Enter you field of study\"\n                value={fieldOfStudy}\n                onChange={(e) => setFieldOfStudy(e.target.value)}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n            <Group as={Col} md=\"4\" controlId=\"school\">\n              <Label>Start Year</Label>\n              <Control\n                required\n                type=\"number\"\n                placeholder=\"Enter start year\"\n                value={startYear}\n                onChange={(e) => setStartYear(e.target.value)}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n            <Group as={Col} md=\"4\" controlId=\"school\">\n              <Label>End Year</Label>\n              <Control\n                required\n                type=\"number\"\n                placeholder=\"Enter end year\"\n                value={endYear}\n                onChange={(e) => setEndYear(e.target.value)}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n            <Group as={Col} md=\"4\" controlId=\"school\">\n              <Label>Grade</Label>\n              <Control\n                required\n                type=\"number\"\n                placeholder=\"Enter your grade\"\n                value={grade}\n                onChange={(e) => setGrade(e.target.value)}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n            <Group as={Col} md=\"12\" controlId=\"school\">\n              <Label>Description</Label>\n              <Control\n                type=\"text\"\n                placeholder=\"Enter your experience\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                as=\"textarea\"\n                rows={4}\n              />\n              <Control.Feedback>Looks good!</Control.Feedback>\n            </Group>\n          </Row>\n        </Form>\n      </Body>\n      <Footer>\n        <Button variant=\"secondary\" onClick={props.onHide}>\n          Close\n        </Button>\n        <Button variant=\"primary\" onClick={handleSubmit}>\n          Save changes\n        </Button>\n      </Footer>\n    </Modal>\n  );\n};\n\nexport default EducationFormModal;","import React, { useState } from \"react\";\r\nimport { Button, Card, ListGroup } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { selectEducations, selectName } from '../../app/userReducer';\r\nimport EducationFormModal from './EductionForm';\r\nimport '../Educations/styles.css';\r\nconst { Item } = ListGroup;\r\nconst { Body, Title, Subtitle, Text } = Card;\r\n\r\nconst Educations = () => {\r\n  const [ showEduModal, setShowEduModal ] = useState(false);\r\n  const userName = useSelector(selectName);\r\n  const location = useLocation();\r\n  const educations = useSelector(selectEducations);\r\n\r\n    const params = new URLSearchParams(location.search);\r\n    const queryName = params.get(\"name\");\r\n  return (\r\n    <div className=\"NewEdu_App\">\r\n      <h3>Welcome to {userName || queryName}'s Education Details</h3>\r\n      <Button  className=\"newEdu-btn\" variant=\"primary\" onClick={() => setShowEduModal(true)}>\r\n        Add New Education\r\n      </Button>\r\n      <div className=\"content-box \">\r\n        <ListGroup className=\"bookmarks\">\r\n          {educations?.map(({ school, degree }, index) => (\r\n            <Item key={index}>\r\n              <h6>{school}</h6>\r\n              <p>{degree}</p>\r\n            </Item>\r\n          ))}\r\n        </ListGroup>\r\n        <ListGroup className=\"educations-list\">\r\n          {educations?.map(\r\n            (\r\n              {\r\n                school,\r\n                degree,\r\n                fieldOfStudy,\r\n                startYear,\r\n                endYear,\r\n                grade,\r\n                description,\r\n              },\r\n              index\r\n            ) => (\r\n              <Item key={index}>\r\n                <Card>\r\n                  <Body>\r\n                    <Title>\r\n                      {school} - {degree}({fieldOfStudy})\r\n                    </Title>\r\n                    <Subtitle className=\"mb-2 text-muted\">\r\n                      {startYear} - {endYear}, Grade: {grade}\r\n                    </Subtitle>\r\n                    {description && <Text>{description}</Text>}\r\n                  </Body>\r\n                </Card>\r\n              </Item>\r\n            )\r\n          )}\r\n        </ListGroup>\r\n      </div>\r\n      <EducationFormModal\r\n        show={showEduModal}\r\n        onHide={() => setShowEduModal(false)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Educations;\r\n","export const routes = {\n    home: '/',\n    educations: '/educations'\n}\n\nexport default routes;","import React, { useState } from \"react\";\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { updateName } from \"../../app/userReducer\";\r\nimport routes from \"../../helper/constants\";\r\nimport \"./styles.css\";\r\nconst { Row, Group, Label, Control } = Form;\r\nconst Home = (props) => {\r\n  const [validated, setValidated] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      return false;\r\n    }\r\n    dispatch(updateName(name));\r\n    setValidated(true);\r\n    history.push(`${routes.educations}?name=${name}`);\r\n  };\r\n\r\n  return (\r\n\r\n      <div className=\"App\">\r\n        <h1 className=\"home_title\">\r\n          Hi there! Welcome to your Education Showcase.\r\n        </h1>\r\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n          <Row>\r\n            <Group controlId=\"validationCustom01\" className=\"home_label\">\r\n              <Label className=\"label\">\r\n                Type your name and \"Enter\" below to begin!\r\n              </Label>\r\n              <Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Full Name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <Control.Feedback>Looks good!</Control.Feedback>\r\n            </Group>\r\n          </Row>\r\n          <div class=\"text-center\">\r\n            <Button className=\"home_button btn-primary btn\" type=\"submit\">\r\n              Enter\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Educations from \"./components/Educations\";\nimport Home from \"./components/Home\";\nimport routes from \"./helper/constants\";\n\nexport default function App() {\n  return (\n\n      <Router>\n        <Switch>\n          <Route exact path={routes.educations}>\n            <Educations />\n          </Route>\n          <Route path={routes.home}>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from './userReducer';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}